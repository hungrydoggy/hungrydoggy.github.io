{"version":3,"sources":["common/TopPart.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["TopPart","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","cur_path","window","location","pathname","data","_makeData","menu_tags","menus","map","menu","idx","undefined","sub_menu","react_default","a","createElement","react_router_dom","className","path","to","key","name","sub_menus","style","cursor","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","right_menu_tags","right_menus","onClick","_logout","redirect_path","setState","Component","Home","App","common_TopPart","react_router","exact","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ece13708.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom'\r\n\r\n\r\nclass TopPart extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n  }\r\n\r\n  render () {\r\n\r\n    const cur_path = window.location.pathname;\r\n\r\n    const data = this._makeData();\r\n\r\n    const menu_tags = data.menus.map((menu, idx)=>{\r\n\r\n\r\n      if(menu.sub_menu === undefined) { // have no sub-menu\r\n\r\n        return (\r\n          <Link className={'nav-item nav-link mx-3' + ((cur_path === menu.path)?' active':'')} to={menu.path} key={menu.path}>\r\n            {menu.name}\r\n          </Link>\r\n        );\r\n\r\n      }else { // have sub-menu\r\n        \r\n        let sub_menus = menu.sub_menu.map((sub_menu)=>{\r\n          return (\r\n            <Link className={'nav-item nav-link mx-3' + ((cur_path === sub_menu.path)?' active':'')} to={sub_menu.path} key={sub_menu.path}>\r\n              {sub_menu.name}\r\n            </Link>\r\n          );\r\n        })\r\n\r\n        return (\r\n        <div className=\"dropdown\" key={idx}>\r\n          <div className=\"nav-item nav-link mx-3 dropdown-toggle\" style={{cursor:'pointer'}} id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            {menu.name}\r\n          </div>\r\n          <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n            {sub_menus}\r\n          </div>\r\n        </div>\r\n        );\r\n      }\r\n    });\r\n    \r\n    const right_menu_tags = data.right_menus.map((menu, idx)=>{\r\n      return (\r\n        <Link className={'nav-item nav-link mx-3 my-0 py-0' + ((cur_path === menu.path)?' active':'')} to={menu.path} key={menu.path}>\r\n          <h4>{menu.name}</h4>\r\n        </Link>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\"><Logo height={'2rem'}/></Link> */}\r\n          <Link className=\"navbar-brand\" to=\"/\">강의 블로그</Link>\r\n          <div className=\"mx-3\"></div>\r\n          <div className=\"navbar-nav flex-grow-1\">\r\n            <div className=\"w-100 d-flex align-items-center\">\r\n              {menu_tags}\r\n              <div className=\"flex-grow-1\"></div>\r\n              <button className=\"btn btn-sm btn-secondary\" onClick={()=>this._logout()}>logout</button>\r\n              {right_menu_tags}\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  _makeData () {\r\n    return {\r\n      menus: [\r\n        { name: 'Dashboard', path: '/'         },\r\n        { name: 'Social'   , path: '/social'   },\r\n        { name: 'Sale'     , path: '/sale'     },\r\n        { name: 'Product'  , path: '/product'  },\r\n      ],\r\n      right_menus: [\r\n        { name: 'Tips'     , path: '/tips'     },\r\n      ],\r\n    };\r\n  }\r\n\r\n  _logout () {\r\n    this.redirect_path = '/login';\r\n    this.setState({});\r\n  }\r\n}\r\n\r\nexport default TopPart;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Home extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        home\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom'\n\nimport TopPart from './common/TopPart'\nimport Home from './views/Home'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"h-100\">\n        <div className=\"mb-4\">\n          <TopPart></TopPart>\n        </div>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}